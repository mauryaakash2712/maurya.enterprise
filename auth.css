// Complete Authentication System (auth.js)

// Authentication Manager Class
class AuthManager {
    constructor() {
        this.currentUser = null;
        this.adminUser = null;
        this.sessionTimeout = null;
        this.otpData = null;
        this.initializeAuth();
    }

    // Initialize Authentication System
    initializeAuth() {
        this.loadSession();
        this.setupEventListeners();
        this.updateAuthUI();
        
        // Check for remember me
        if (localStorage.getItem('mtechRememberMe') === 'true') {
            this.autoLogin();
        }

        // Check admin session
        if (sessionStorage.getItem('mtechAdminSession')) {
            this.loadAdminSession();
        }

        console.log('Authentication system initialized');
    }

    // Setup Event Listeners
    setupEventListeners() {
        // Customer Authentication
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        const logoutBtn = document.getElementById('logoutBtn');
        const accountBtn = document.getElementById('accountBtn');
        
        if (loginBtn) loginBtn.addEventListener('click', () => this.showLoginModal());
        if (registerBtn) registerBtn.addEventListener('click', () => this.showRegisterModal());
        if (loginForm) loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        if (registerForm) registerForm.addEventListener('submit', (e) => this.handleRegister(e));
        if (logoutBtn) logoutBtn.addEventListener('click', () => this.logout());
        if (accountBtn) accountBtn.addEventListener('click', () => this.showUserAccount());

        // Admin Authentication
        const adminAccessForm = document.getElementById('adminAccessForm');
        const adminLoginForm = document.getElementById('adminLoginForm');
        
        if (adminAccessForm) adminAccessForm.addEventListener('submit', (e) => this.handleAdminLogin(e));
        if (adminLoginForm) adminLoginForm.addEventListener('submit', (e) => this.handleAdminLogin(e));

        // OTP Form
        const otpForm = document.getElementById('otpForm');
        if (otpForm) otpForm.addEventListener('submit', (e) => this.handleOTPVerification(e));

        // Password strength checker
        const registerPassword = document.getElementById('registerPassword');
        if (registerPassword) {
            registerPassword.addEventListener('input', (e) => this.checkPasswordStrength(e.target.value));
        }

        // OTP input handling
        this.setupOTPInputs();

        // Account tabs
        this.setupAccountTabs();

        // Close modals when clicking outside
        window.addEventListener('click', (e) => this.handleModalClicks(e));
    }

    // === USER AUTHENTICATION ===

    // Handle Customer Login
    async handleLogin(e) {
        e.preventDefault();
        
        const identifier = document.getElementById('loginIdentifier').value.trim();
        const password = document.getElementById('loginPassword').value;
        const rememberMe = document.getElementById('rememberMe').checked;

        if (!identifier || !password) {
            this.showToast('Please fill in all fields', 'error');
            return;
        }

        try {
            // Get users from storage
            const users = JSON.parse(localStorage.getItem('mtechUsers')) || [];
            
            // Find user by email or mobile
            const user = users.find(u => 
                u.email === identifier || 
                u.mobile === identifier ||
                (u.mobile && u.mobile.includes(identifier))
            );

            if (!user) {
                this.showToast('User not found', 'error');
                return;
            }

            // Verify password (in production, use proper hashing)
            if (user.password !== this.hashPassword(password)) {
                this.showToast('Invalid password', 'error');
                return;
            }

            // Check if account is verified
            if (!user.verified) {
                this.showToast('Please verify your account first', 'error');
                this.sendOTP(user.mobile, 'verification');
                return;
            }

            // Login successful
            this.currentUser = user;
            this.currentUser.lastLogin = new Date().toISOString();
            
            // Update user in storage
            const userIndex = users.findIndex(u => u.id === user.id);
            users[userIndex] = this.currentUser;
            localStorage.setItem('mtechUsers', JSON.stringify(users));

            // Set session
            this.setSession(rememberMe);
            
            // Update UI
            this.updateAuthUI();
            this.closeLoginModal();
            
            this.showToast(`Welcome back, ${user.firstName}!`, 'success');
            
            // Log activity
            this.logUserActivity('login', 'User logged in successfully');

        } catch (error) {
            console.error('Login error:', error);
            this.showToast('Login failed. Please try again.', 'error');
        }
    }

    // Handle Customer Registration
    async handleRegister(e) {
        e.preventDefault();
        
        const formData = {
            firstName: document.getElementById('firstName').value.trim(),
            lastName: document.getElementById('lastName').value.trim(),
            email: document.getElementById('registerEmail').value.trim().toLowerCase(),
            mobile: document.getElementById('countryCode').value + document.getElementById('registerMobile').value.trim(),
            password: document.getElementById('registerPassword').value,
            confirmPassword: document.getElementById('confirmPassword').value,
            agreeTerms: document.getElementById('agreeTerms').checked,
            newsletter: document.getElementById('newsletter').checked
        };

        // Validation
        if (!this.validateRegistration(formData)) {
            return;
        }

        try {
            // Check if user already exists
            const users = JSON.parse(localStorage.getItem('mtechUsers')) || [];
            
            if (users.find(u => u.email === formData.email)) {
                this.showToast('Email already registered', 'error');
                return;
            }

            if (users.find(u => u.mobile === formData.mobile)) {
                this.showToast('Mobile number already registered', 'error');
                return;
            }

            // Create new user
            const newUser = {
                id: Date.now(),
                firstName: formData.firstName,
                lastName: formData.lastName,
                email: formData.email,
                mobile: formData.mobile,
                password: this.hashPassword(formData.password),
                verified: false,
                newsletter: formData.newsletter,
                registrationDate: new Date().toISOString(),
                addresses: [],
                preferences: {
                    emailNotifications: true,
                    smsNotifications: true,
                    promotionalEmails: formData.newsletter
                }
            };

            // Save user
            users.push(newUser);
            localStorage.setItem('mtechUsers', JSON.stringify(users));

            // Send OTP for verification
            this.sendOTP(formData.mobile, 'registration', newUser);
            
            this.showToast('Registration successful! Please verify your mobile number.', 'success');
            this.closeRegisterModal();

        } catch (error) {
            console.error('Registration error:', error);
            this.showToast('Registration failed. Please try again.', 'error');
        }
    }

    // Validate Registration Data
    validateRegistration(data) {
        if (!data.firstName || !data.lastName) {
            this.showToast('Please enter your full name', 'error');
            return false;
        }

        if (!this.isValidEmail(data.email)) {
            this.showToast('Please enter a valid email address', 'error');
            return false;
        }

        if (!this.isValidMobile(data.mobile)) {
            this.showToast('Please enter a valid mobile number', 'error');
            return false;
        }

        if (data.password.length < 8) {
            this.showToast('Password must be at least 8 characters long', 'error');
            return false;
        }

        if (data.password !== data.confirmPassword) {
            this.showToast('Passwords do not match', 'error');
            return false;
        }

        if (!data.agreeTerms) {
            this.showToast('Please agree to the Terms of Service', 'error');
            return false;
        }

        return true;
    }

    // === ADMIN AUTHENTICATION ===

    // Handle Admin Login
    async handleAdminLogin(e) {
        e.preventDefault();
        
        let username, password, secretKey, remember;
        
        // Check if it's from admin page or customer modal
        if (document.getElementById('adminUser')) {
            // Admin page login
            username = document.getElementById('adminUser').value.trim();
            password = document.getElementById('adminPass').value;
            secretKey = document.getElementById('adminSecret').value.trim();
            remember = document.getElementById('rememberDevice').checked;
        } else {
            // Customer modal login
            username = document.getElementById('adminUsername').value.trim();
            password = document.getElementById('adminPassword').value;
            secretKey = document.getElementById('adminSecretKey').value.trim();
            remember = document.getElementById('adminRemember').checked;
        }

        if (!username || !password) {
            this.showToast('Please fill in all required fields', 'error');
            return;
        }

        try {
            // Get admin credentials
            const adminCreds = this.getAdminCredentials();
            
            // Verify credentials
            if (username !== adminCreds.username) {
                this.showToast('Invalid admin username', 'error');
                this.logSecurityEvent('failed_admin_login', { username, ip: 'localhost' });
                return;
            }

            if (password !== adminCreds.password) {
                this.showToast('Invalid admin password', 'error');
                this.logSecurityEvent('failed_admin_login', { username, ip: 'localhost' });
                return;
            }

            // Check secret key if required
            if (adminCreds.requireSecretKey && secretKey !== adminCreds.secretKey) {
                this.showToast('Invalid secret key', 'error');
                this.logSecurityEvent('failed_admin_login', { username, reason: 'invalid_secret_key' });
                return;
            }

            // Admin login successful
            this.adminUser = {
                username: username,
                loginTime: new Date().toISOString(),
                sessionId: this.generateSessionId()
            };

            // Set admin session
            this.setAdminSession(remember);
            
            // Redirect to admin interface
            if (window.location.pathname.includes('admin.html')) {
                this.showAdminInterface();
            } else {
                window.location.href = 'admin.html';
            }
            
            this.showToast('Admin login successful', 'success');
            this.logSecurityEvent('admin_login_success', { username });

        } catch (error) {
            console.error('Admin login error:', error);
            this.showToast('Admin login failed. Please try again.', 'error');
        }
    }

    // Get Admin Credentials
    getAdminCredentials() {
        const defaultCreds = {
            username: 'admin',
            password: 'MTech@123',
            secretKey: 'SecureKey2025',
            requireSecretKey: false
        };

        const savedCreds = localStorage.getItem('mtechAdminCredentials');
        return savedCreds ? JSON.parse(savedCreds) : defaultCreds;
    }

    // Set Admin Session
    setAdminSession(remember = false) {
        const sessionData = {
            adminUser: this.adminUser,
            timestamp: Date.now(),
            remember: remember
        };

        sessionStorage.setItem('mtechAdminSession', JSON.stringify(sessionData));
        
        if (remember) {
            localStorage.setItem('mtechAdminRemember', JSON.stringify({
                username: this.adminUser.username,
                expires: Date.now() + (7 * 24 * 60 * 60 * 1000) // 7 days
            }));
        }

        // Set auto-logout timer (30 minutes)
        this.setAdminTimeout();
    }

    // Show Admin Interface
    showAdminInterface() {
        const loginScreen = document.getElementById('adminLoginScreen');
        const adminInterface = document.getElementById('adminInterface');
        
        if (loginScreen) loginScreen.style.display = 'none';
        if (adminInterface) adminInterface.style.display = 'block';
        
        // Update admin user info
        const adminUserName = document.getElementById('adminUserName');
        const adminLoginTime = document.getElementById('adminLoginTime');
        
        if (adminUserName) adminUserName.textContent = this.adminUser.username;
        if (adminLoginTime) adminLoginTime.textContent = `Logged in: ${new Date(this.adminUser.loginTime).toLocaleString()}`;
    }

    // Admin Logout
    adminLogout() {
        sessionStorage.removeItem('mtechAdminSession');
        localStorage.removeItem('mtechAdminRemember');
        
        if (this.sessionTimeout) {
            clearTimeout(this.sessionTimeout);
        }

        this.adminUser = null;
        
        // Redirect to login screen
        if (window.location.pathname.includes('admin.html')) {
            const loginScreen = document.getElementById('adminLoginScreen');
            const adminInterface = document.getElementById('adminInterface');
            
            if (loginScreen) loginScreen.style.display = 'flex';
            if (adminInterface) adminInterface.style.display = 'none';
        } else {
            window.location.href = 'customer.html';
        }
        
        this.showToast('Admin logged out successfully', 'success');
    }

    // === OTP SYSTEM ===

    // Send OTP
    sendOTP(mobile, type, userData = null) {
        // Generate 6-digit OTP
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        
        this.otpData = {
            otp: otp,
            mobile: mobile,
            type: type,
            userData: userData,
            timestamp: Date.now(),
            attempts: 0
        };

        // In production, integrate with SMS service
        console.log(`OTP for ${mobile}: ${otp}`);
        
        // Show OTP modal
        this.showOtpModal(mobile, type);
        
        // For demo, show OTP in alert (remove in production)
        setTimeout(() => {
            alert(`Demo OTP for ${mobile}: ${otp}`);
        }, 1000);
        
        // Start countdown
        this.startOTPCountdown();
    }

    // Handle OTP Verification
    handleOTPVerification(e) {
        e.preventDefault();
        
        if (!this.otpData) {
            this.showToast('OTP session expired. Please request a new OTP.', 'error');
            return;
        }

        // Get OTP from inputs
        const otpInputs = document.querySelectorAll('.otp-input');
        const enteredOTP = Array.from(otpInputs).map(input => input.value).join('');

        if (enteredOTP.length !== 6) {
            this.showToast('Please enter complete OTP', 'error');
            return;
        }

        // Check attempts
        this.otpData.attempts++;
        if (this.otpData.attempts > 3) {
            this.showToast('Too many failed attempts. Please request a new OTP.', 'error');
            this.otpData = null;
            this.closeOtpModal();
            return;
        }

        // Verify OTP
        if (enteredOTP !== this.otpData.otp) {
            this.showToast(`Invalid OTP. ${4 - this.otpData.attempts} attempts remaining.`, 'error');
            this.shakeOTPInputs();
            return;
        }

        // OTP verified successfully
        this.handleOTPSuccess();
    }

    // Handle OTP Success
    handleOTPSuccess() {
        const { type, userData } = this.otpData;
        
        if (type === 'registration' && userData) {
            // Verify user account
            const users = JSON.parse(localStorage.getItem('mtechUsers')) || [];
            const userIndex = users.findIndex(u => u.id === userData.id);
            
            if (userIndex !== -1) {
                users[userIndex].verified = true;
                localStorage.setItem('mtechUsers', JSON.stringify(users));
                
                this.showToast('Mobile number verified! You can now login.', 'success');
            }
        } else if (type === 'verification') {
            this.showToast('Account verified successfully!', 'success');
        } else if (type === 'reset') {
            this.showPasswordResetForm();
            return;
        }

        this.otpData = null;
        this.closeOtpModal();
    }

    // Start OTP Countdown
    startOTPCountdown() {
        let timeLeft = 300; // 5 minutes
        const countdownElement = document.getElementById('otpCountdown');
        
        const countdown = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            if (countdownElement) {
                countdownElement.textContent = `Resend OTP in ${minutes}:${seconds.toString().padStart(2, '0')}`;
            }
            
            if (timeLeft <= 0) {
                clearInterval(countdown);
                if (countdownElement) {
                    countdownElement.innerHTML = '<a href="#" onclick="authManager.resendOTP()">Resend OTP</a>';
                }
            }
            
            timeLeft--;
        }, 1000);
    }

    // Resend OTP
    resendOTP() {
        if (this.otpData) {
            this.sendOTP(this.otpData.mobile, this.otpData.type, this.otpData.userData);
            this.showToast('OTP resent successfully', 'success');
        }
    }

    // === SESSION MANAGEMENT ===

    // Set User Session
    setSession(rememberMe = false) {
        const sessionData = {
            user: this.currentUser,
            timestamp: Date.now()
        };

        sessionStorage.setItem('mtechUserSession', JSON.stringify(sessionData));
        
        if (rememberMe) {
            localStorage.setItem('mtechRememberMe', 'true');
            localStorage.setItem('mtechUserRemember', JSON.stringify({
                userId: this.currentUser.id,
                expires: Date.now() + (30 * 24 * 60 * 60 * 1000) // 30 days
            }));
        }
    }

    // Load Session
    loadSession() {
        const sessionData = sessionStorage.getItem('mtechUserSession');
        if (sessionData) {
            const { user, timestamp } = JSON.parse(sessionData);
            
            // Check if session is still valid (24 hours)
            if (Date.now() - timestamp < 24 * 60 * 60 * 1000) {
                this.currentUser = user;
                return true;
            } else {
                this.clearSession();
            }
        }
        return false;
    }

    // Auto Login (Remember Me)
    autoLogin() {
        const rememberData = localStorage.getItem('mtechUserRemember');
        if (rememberData) {
            const { userId, expires } = JSON.parse(rememberData);
            
            if (Date.now() < expires) {
                const users = JSON.parse(localStorage.getItem('mtechUsers')) || [];
                const user = users.find(u => u.id === userId);
                
                if (user) {
                    this.currentUser = user;
                    this.setSession(true);
                    return true;
                }
            } else {
                localStorage.removeItem('mtechUserRemember');
                localStorage.removeItem('mtechRememberMe');
            }
        }
        return false;
    }

    // Load Admin Session
    loadAdminSession() {
        const sessionData = sessionStorage.getItem('mtechAdminSession');
        if (sessionData) {
            const { adminUser, timestamp } = JSON.parse(sessionData);
            
            // Check if session is still valid (30 minutes)
            if (Date.now() - timestamp < 30 * 60 * 1000) {
                this.adminUser = adminUser;
                if (window.location.pathname.includes('admin.html')) {
                    this.showAdminInterface();
                }
                this.setAdminTimeout();
                return true;
            } else {
                this.clearAdminSession();
            }
        }
        
        // Check remember me for admin
        const rememberData = localStorage.getItem('mtechAdminRemember');
        if (rememberData) {
            const { username, expires } = JSON.parse(rememberData);
            
            if (Date.now() < expires) {
                this.adminUser = {
                    username: username,
                    loginTime: new Date().toISOString(),
                    sessionId: this.generateSessionId()
                };
                this.setAdminSession(true);
                return true;
            } else {
                localStorage.removeItem('mtechAdminRemember');
            }
        }
        
        return false;
    }

    // Set Admin Timeout
    setAdminTimeout() {
        if (this.sessionTimeout) {
            clearTimeout(this.sessionTimeout);
        }

        // Show warning at 25 minutes
        const warningTimeout = setTimeout(() => {
            this.showSessionWarning();
        }, 25 * 60 * 1000);

        // Auto logout at 30 minutes
        this.sessionTimeout = setTimeout(() => {
            this.adminLogout();
            this.showToast('Session expired for security', 'error');
        }, 30 * 60 * 1000);
    }

    // Show Session Warning
    showSessionWarning() {
        const modal = document.getElementById('sessionWarningModal');
        if (modal) {
            modal.style.display = 'block';
            
            let timeLeft = 5 * 60; // 5 minutes
            const countdown = setInterval(() => {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                
                const countdownElement = document.getElementById('sessionCountdown');
                if (countdownElement) {
                    countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                }
                
                if (timeLeft <= 0) {
                    clearInterval(countdown);
                    modal.style.display = 'none';
                }
                
                timeLeft--;
            }, 1000);
        }
    }

    // Extend Admin Session
    extendSession() {
        this.setAdminSession(false);
        const modal = document.getElementById('sessionWarningModal');
        if (modal) modal.style.display = 'none';
        this.showToast('Session extended successfully', 'success');
    }

    // Clear Sessions
    clearSession() {
        sessionStorage.removeItem('mtechUserSession');
        this.currentUser = null;
    }

    clearAdminSession() {
        sessionStorage.removeItem('mtechAdminSession');
        this.adminUser = null;
        if (this.sessionTimeout) {
            clearTimeout(this.sessionTimeout);
        }
    }

    // === UI MANAGEMENT ===

    // Update Authentication UI
    updateAuthUI() {
        const authButtons = document.getElementById('authButtons');
        const userMenu = document.getElementById('userMenu');
        const userWelcome = document.getElementById('userWelcome');
        const userName = document.getElementById('userName');
        const userEmail = document.getElementById('userEmail');

        if (this.currentUser) {
            // Show logged in state
            if (authButtons) authButtons.style.display = 'none';
            if (userMenu) userMenu.style.display = 'block';
            
            if (userWelcome) userWelcome.textContent = `Hi, ${this.currentUser.firstName}`;
            if (userName) userName.textContent = `${this.currentUser.firstName} ${this.currentUser.lastName}`;
            if (userEmail) userEmail.textContent = this.currentUser.email;
        } else {
            // Show logged out state
            if (authButtons) authButtons.style.display = 'flex';
            if (userMenu) userMenu.style.display = 'none';
        }
    }

    // === MODAL MANAGEMENT ===

    showLoginModal() {
        document.getElementById('loginModal').style.display = 'block';
        this.closeRegisterModal();
    }

    closeLoginModal() {
        document.getElementById('loginModal').style.display = 'none';
        this.resetForm('loginForm');
    }

    showRegisterModal() {
        document.getElementById('registerModal').style.display = 'block';
        this.closeLoginModal();
    }

    closeRegisterModal() {
        document.getElementById('registerModal').style.display = 'none';
        this.resetForm('registerForm');
    }

    showAdminLogin() {
        const modal = document.getElementById('adminLoginModal');
        if (modal) {
            modal.style.display = 'block';
        } else {
            // Redirect to admin page if modal doesn't exist
            window.location.href = 'admin.html';
        }
    }

    closeAdminLoginModal() {
        const modal = document.getElementById('adminLoginModal');
        if (modal) {
            modal.style.display = 'none';
            this.resetForm('adminLoginForm');
        }
    }

    showOtpModal(mobile, type) {
        const modal = document.getElementById('otpModal');
        const message = document.getElementById('otpMessage');
        
        if (modal && message) {
            const maskedMobile = mobile.replace(/(\d{2})\d+(\d{2})/, '$1****$2');
            message.textContent = `Enter the 6-digit code sent to ${maskedMobile}`;
            modal.style.display = 'block';
        }
    }

    closeOtpModal() {
        const modal = document.getElementById('otpModal');
        if (modal) {
            modal.style.display = 'none';
            this.resetOTPInputs();
        }
    }

    showUserAccount() {
        const modal = document.getElementById('userAccountModal');
        if (modal) {
            this.loadUserAccountData();
            modal.style.display = 'block';
        }
    }

    closeUserAccountModal() {
        const modal = document.getElementById('userAccountModal');
        if (modal) modal.style.display = 'none';
    }

    showForgotPassword() {
        document.getElementById('forgotPasswordModal').style.display = 'block';
        this.closeLoginModal();
    }

    closeForgotPasswordModal() {
        document.getElementById('forgotPasswordModal').style.display = 'none';
    }

    // Handle Modal Clicks (Close on outside click)
    handleModalClicks(e) {
        const modals = [
            'loginModal', 'registerModal', 'adminLoginModal', 
            'otpModal', 'userAccountModal', 'forgotPasswordModal'
        ];
        
        modals.forEach(modalId => {
            const modal = document.getElementById(modalId);
            if (modal && e.target === modal) {
                modal.style.display = 'none';
            }
        });
    }

    // === UTILITY FUNCTIONS ===

    // Password Toggle
    togglePassword(inputId) {
        const input = document.getElementById(inputId);
        const button = input.nextElementSibling;
        
        if (input.type === 'password') {
            input.type = 'text';
            button.textContent = '🙈';
        } else {
            input.type = 'password';
            button.textContent = '👁️';
        }
    }

    // Check Password Strength
    checkPasswordStrength(password) {
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        if (!strengthBar || !strengthText) return;
        
        let strength = 0;
        let text = 'Weak';
        
        if (password.length >= 8) strength++;
        if (/[A-Z]/.test(password)) strength++;
        if (/[a-z]/.test(password)) strength++;
        if (/[0-9]/.test(password)) strength++;
        if (/[^A-Za-z0-9]/.test(password)) strength++;
        
        strengthBar.className = 'strength-bar';
        
        if (strength >= 4) {
            strengthBar.classList.add('strong');
            text = 'Strong';
        } else if (strength >= 2) {
            strengthBar.classList.add('medium');
            text = 'Medium';
        } else {
            strengthBar.classList.add('weak');
            text = 'Weak';
        }
        
        strengthText.textContent = `Password strength: ${text}`;
    }

    // Setup OTP Inputs
    setupOTPInputs() {
        const otpInputs = document.querySelectorAll('.otp-input');
        
        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                if (e.target.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });
            
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && e.target.value === '' && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
        });
    }

    // Reset OTP Inputs
    resetOTPInputs() {
        const otpInputs = document.querySelectorAll('.otp-input');
        otpInputs.forEach(input => input.value = '');
        if (otpInputs.length > 0) otpInputs[0].focus();
    }

    // Shake OTP Inputs
    shakeOTPInputs() {
        const container = document.querySelector('.otp-container');
        if (container) {
            container.classList.add('shake');
            setTimeout(() => container.classList.remove('shake'), 500);
        }
    }

    // Setup Account Tabs
    setupAccountTabs() {
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabPanels = document.querySelectorAll('.tab-panel');
        
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.dataset.tab;
                
                // Update active tab button
                tabBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Show target panel
                tabPanels.forEach(panel => {
                    panel.classList.remove('active');
                    if (panel.id === targetTab) {
                        panel.classList.add('active');
                    }
                });
                
                // Load tab-specific content
                this.loadTabContent(targetTab);
            });
        });
    }

    // Load Tab Content
    loadTabContent(tabId) {
        switch(tabId) {
            case 'orders':
                this.loadUserOrders();
                break;
            case 'addresses':
                this.loadUserAddresses();
                break;
            default:
                break;
        }
    }

    // Load User Account Data
    loadUserAccountData() {
        if (!this.currentUser) return;
        
        // Populate profile form
        const profileForm = document.getElementById('profileForm');
        if (profileForm) {
            document.getElementById('profileFirstName').value = this.currentUser.firstName || '';
            document.getElementById('profileLastName').value = this.currentUser.lastName || '';
            document.getElementById('profileEmail').value = this.currentUser.email || '';
            document.getElementById('profileMobile').value = this.currentUser.mobile || '';
        }
        
        // Load preferences
        if (this.currentUser.preferences) {
            const prefs = this.currentUser.preferences;
            const emailNotifications = document.getElementById('emailNotifications');
            const smsNotifications = document.getElementById('smsNotifications');
            const promotionalEmails = document.getElementById('promotionalEmails');
            
            if (emailNotifications) emailNotifications.checked = prefs.emailNotifications;
            if (smsNotifications) smsNotifications.checked = prefs.smsNotifications;
            if (promotionalEmails) promotionalEmails.checked = prefs.promotionalEmails;
        }
    }

    // Load User Orders
    loadUserOrders() {
        if (!this.currentUser) return;
        
        const orders = JSON.parse(localStorage.getItem('mtechOrders')) || [];
        const userOrders = orders.filter(order => 
            order.customer.email === this.currentUser.email
        );
        
        const ordersList = document.getElementById('userOrdersList');
        if (ordersList) {
            if (userOrders.length === 0) {
                ordersList.innerHTML = '<p>No orders found. Start shopping!</p>';
            } else {
                ordersList.innerHTML = userOrders.map(order => `
                    <div class="order-item">
                        <div class="order-header">
                            <h4>Order #${order.orderId}</h4>
                            <span class="order-total">$${order.total.toFixed(2)}</span>
                        </div>
                        <p><strong>Date:</strong> ${new Date(order.orderDate).toLocaleDateString()}</p>
                        <p><strong>Status:</strong> Processing</p>
                        <p><strong>Items:</strong> ${order.items.length} item(s)</p>
                    </div>
                `).join('');
            }
        }
    }

    // Reset Form
    resetForm(formId) {
        const form = document.getElementById(formId);
        if (form) form.reset();
    }

    // Validation Functions
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    isValidMobile(mobile) {
        const mobileRegex = /^\+\d{1,3}\d{7,14}$/;
        return mobileRegex.test(mobile);
    }

    // Hash Password (Simple - use bcrypt in production)
    hashPassword(password) {
        return btoa(password + 'mtech_salt_2025');
    }

    // Generate Session ID
    generateSessionId() {
        return Math.random().toString(36).substring(2, 15) + 
               Math.random().toString(36).substring(2, 15);
    }

    // Show Toast Message
    showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}-toast`;
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 5000);
    }

    // Log User Activity
    logUserActivity(action, details) {
        const activities = JSON.parse(localStorage.getItem('mtechUserActivities')) || [];
        
        activities.unshift({
            userId: this.currentUser?.id,
            action: action,
            details: details,
            timestamp: new Date().toISOString(),
            ip: 'localhost'
        });
        
        // Keep only last 100 activities
        if (activities.length > 100) {
            activities.splice(100);
        }
        
        localStorage.setItem('mtechUserActivities', JSON.stringify(activities));
    }

    // Log Security Events
    logSecurityEvent(event, data) {
        const securityLogs = JSON.parse(localStorage.getItem('mtechSecurityLogs')) || [];
        
        securityLogs.unshift({
            event: event,
            data: data,
            timestamp: new Date().toISOString()
        });
        
        // Keep only last 50 security events
        if (securityLogs.length > 50) {
            securityLogs.splice(50);
        }
        
        localStorage.setItem('mtechSecurityLogs', JSON.stringify(securityLogs));
    }

    // Logout User
    logout() {
        this.currentUser = null;
        this.clearSession();
        localStorage.removeItem('mtechRememberMe');
        localStorage.removeItem('mtechUserRemember');
        
        this.updateAuthUI();
        this.showToast('Logged out successfully', 'success');
        
        // Redirect to home if on account page
        const modal = document.getElementById('userAccountModal');
        if (modal && modal.style.display === 'block') {
            this.closeUserAccountModal();
        }
    }

    // Social Login Functions (placeholder for real implementation)
    loginWithGoogle() {
        this.showToast('Google login integration required', 'error');
    }

    loginWithFacebook() {
        this.showToast('Facebook login integration required', 'error');
    }

    registerWithGoogle() {
        this.showToast('Google registration integration required', 'error');
    }

    registerWithFacebook() {
        this.showToast('Facebook registration integration required', 'error');
    }
}

// Initialize Authentication Manager
let authManager;

document.addEventListener('DOMContentLoaded', function() {
    authManager = new AuthManager();
    
    // Make functions globally accessible
    window.showAdminLogin = () => authManager.showAdminLogin();
    window.showLoginModal = () => authManager.showLoginModal();
    window.showRegisterModal = () => authManager.showRegisterModal();
    window.closeLoginModal = () => authManager.closeLoginModal();
    window.closeRegisterModal = () => authManager.closeRegisterModal();
    window.closeAdminLoginModal = () => authManager.closeAdminLoginModal();
    window.closeOtpModal = () => authManager.closeOtpModal();
    window.closeUserAccountModal = () => authManager.closeUserAccountModal();
    window.closeForgotPasswordModal = () => authManager.closeForgotPasswordModal();
    window.showForgotPassword = () => authManager.showForgotPassword();
    window.togglePassword = (id) => authManager.togglePassword(id);
    window.resendOTP = () => authManager.resendOTP();
    window.extendSession = () => authManager.extendSession();
    window.adminLogout = () => authManager.adminLogout();
    window.loginWithGoogle = () => authManager.loginWithGoogle();
    window.loginWithFacebook = () => authManager.loginWithFacebook();
    window.registerWithGoogle = () => authManager.registerWithGoogle();
    window.registerWithFacebook = () => authManager.registerWithFacebook();
});

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AuthManager;
}
